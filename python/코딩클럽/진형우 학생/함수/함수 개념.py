# 함수는 명령어 만들기임
# 개발자는 귀찮다 == 로직(과정)이 반복된다.
# 반복되는 로직(과정)들을 함수로 만들어서 재사용성을 높일 수 있음
# 함수정의는 함수를 사용하는 부분보다 위에 있지 않으면 오류가 남

# 함수의 문법
# def 함수명(전달값1, 전달값2, ...):
#     실행할 문장
#     return 반환값

# 전달값 == 매개변수(parameter) 있어도되고 없어도 됨
# 인자(argument) 있어도되고 없어도 됨
# return 있어도되고 없어도 됨


# 정의하는 부분
def any_sum(x, y):  # x = 12, y = 5, 이때 x, y를 매개변수(parameter)
    return x + y  # 17 return에 있는 반환되는 값을 반환값


# 메인문(tab이 없는), 사용하는 부분
print(any_sum(3, 5))  # 매개변수에 전달하는 3, 5과 같은 실제 값들을 인자(argument)
print(any_sum(12, 5))


# 인자, 매개변수, 반환값이 없는 함수
def some_print():
    print("Hello, world!")


some_print()  # 함수는 ()를 통해서 사용하지 않으면 정의만 인식되고 실제 콘솔창에는 실행 안됨
